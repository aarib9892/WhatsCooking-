(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rawr'), require('rawr/transports/worker')) :
    typeof define === 'function' && define.amd ? define('@impactdk/barcode-scanner', ['exports', 'rawr', 'rawr/transports/worker'], factory) :
    (global = global || self, factory((global.impactdk = global.impactdk || {}, global.impactdk['barcode-scanner'] = {}), global.rawr, global.transport));
}(this, function (exports, rawr, transport) { 'use strict';

    rawr = rawr && rawr.hasOwnProperty('default') ? rawr['default'] : rawr;
    transport = transport && transport.hasOwnProperty('default') ? transport['default'] : transport;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    var Scanner = /** @class */ (function () {
        function Scanner(videoElement, decoder, cb) {
            this.videoElement = videoElement;
            this.decoder = decoder;
            this.cb = cb;
            this.constraints = {
                video: {
                    facingMode: "environment"
                },
                audio: false
            };
            this.running = false;
            this.resolve = function () { return null; };
            this.reject = function () { return null; };
            this.decodeCanvas = document.createElement("canvas");
            this.onLoadedData = this.onLoadedData.bind(this);
            this.getOnFrameHandler = this.getOnFrameHandler.bind(this);
        }
        Scanner.prototype.start = function () {
            return __awaiter(this, void 0, void 0, function () {
                var stream;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.running = true;
                            this.videoElement = this.videoElement;
                            this.videoElement.addEventListener("loadeddata", this.onLoadedData);
                            // Ensure correct attributes
                            this.videoElement.setAttribute("autoplay", "");
                            this.videoElement.setAttribute("muted", "");
                            this.videoElement.setAttribute("playsinline", "");
                            return [4 /*yield*/, navigator.mediaDevices.getUserMedia(this.constraints)];
                        case 1:
                            stream = _a.sent();
                            this.videoElement.srcObject = stream;
                            return [2 /*return*/, new Promise(function (res, rej) {
                                    _this.resolve = res;
                                    _this.reject = rej;
                                })];
                    }
                });
            });
        };
        Scanner.prototype.stop = function () {
            if (!this.videoElement || !this.videoElement.srcObject) {
                return;
            }
            this.videoElement.removeEventListener("loadeddata", this.onLoadedData);
            var ms = this.videoElement.srcObject;
            ms.getTracks().forEach(function (t) { return t.stop(); });
            this.videoElement.srcObject = null;
            this.running = false;
        };
        Scanner.prototype.onLoadedData = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (!this.decodeCanvas || !this.videoElement) {
                        this.reject();
                        return [2 /*return*/];
                    }
                    this.decodeCanvas.height = this.videoElement.videoHeight;
                    this.decodeCanvas.width = this.videoElement.videoWidth;
                    requestAnimationFrame(this.getOnFrameHandler());
                    return [2 /*return*/];
                });
            });
        };
        Scanner.prototype.getOnFrameHandler = function () {
            var _this = this;
            if (!this.decodeCanvas) {
                return function () { return null; };
            }
            this.resolve();
            var decodeCtx = this.decodeCanvas.getContext("2d");
            var onFrame = function () { return __awaiter(_this, void 0, void 0, function () {
                var barcode, err_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.decodeCanvas || !this.videoElement) {
                                return [2 /*return*/];
                            }
                            decodeCtx.drawImage(this.videoElement, 0, 0, this.videoElement.videoWidth, this.videoElement.videoHeight);
                            barcode = null;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.decoder.decode(decodeCtx)];
                        case 2:
                            barcode = _a.sent();
                            if (barcode) {
                                this.cb(barcode);
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            err_1 = _a.sent();
                            console.log({ decodeError: err_1.message });
                            return [3 /*break*/, 4];
                        case 4:
                            if (this.running) {
                                requestAnimationFrame(onFrame);
                            }
                            return [2 /*return*/];
                    }
                });
            }); };
            return onFrame;
        };
        return Scanner;
    }());

    var workerFileName = "wasm-worker.js";
    function sanitizeDirString(s) {
        return s.replace(/\/$/, "");
    }
    var WasmDecoder = /** @class */ (function () {
        function WasmDecoder(installationDir) {
            if (installationDir === void 0) { installationDir = ""; }
            var workerFilePath = installationDir + "/" + workerFileName;
            this.worker = new Worker(workerFilePath);
            this.wasmDecoder = rawr({ transport: transport(this.worker) });
        }
        WasmDecoder.getInstance = function (installationDir) {
            if (installationDir === void 0) { installationDir = ""; }
            if (!WasmDecoder.instance) {
                var sanitized = sanitizeDirString(installationDir);
                WasmDecoder.instance = new WasmDecoder(sanitized);
            }
            return WasmDecoder.instance;
        };
        WasmDecoder.removeInstance = function () {
            WasmDecoder.instance.dispose();
            WasmDecoder.instance = null;
        };
        WasmDecoder.prototype.decode = function (context) {
            var canvas = context.canvas;
            var width = canvas.width;
            var height = canvas.height;
            var imageData = context.getImageData(0, 0, width, height);
            return this.wasmDecoder.methods.detectUrl(width, height, imageData);
        };
        WasmDecoder.prototype.dispose = function () {
            this.wasmDecoder = null;
            this.worker.terminate();
        };
        return WasmDecoder;
    }());

    exports.Scanner = Scanner;
    exports.WasmDecoder = WasmDecoder;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=impactdk-barcode-scanner.umd.js.map
