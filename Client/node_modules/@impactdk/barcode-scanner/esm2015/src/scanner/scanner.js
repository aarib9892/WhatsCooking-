import * as tslib_1 from "tslib";
export class Scanner {
    constructor(videoElement, decoder, cb) {
        this.videoElement = videoElement;
        this.decoder = decoder;
        this.cb = cb;
        this.constraints = {
            video: {
                facingMode: "environment"
            },
            audio: false
        };
        this.running = false;
        this.resolve = () => null;
        this.reject = () => null;
        this.decodeCanvas = document.createElement("canvas");
        this.onLoadedData = this.onLoadedData.bind(this);
        this.getOnFrameHandler = this.getOnFrameHandler.bind(this);
    }
    start() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.running = true;
            this.videoElement = this.videoElement;
            this.videoElement.addEventListener("loadeddata", this.onLoadedData);
            // Ensure correct attributes
            this.videoElement.setAttribute("autoplay", "");
            this.videoElement.setAttribute("muted", "");
            this.videoElement.setAttribute("playsinline", "");
            const stream = yield navigator.mediaDevices.getUserMedia(this.constraints);
            this.videoElement.srcObject = stream;
            return new Promise((res, rej) => {
                this.resolve = res;
                this.reject = rej;
            });
        });
    }
    stop() {
        if (!this.videoElement || !this.videoElement.srcObject) {
            return;
        }
        this.videoElement.removeEventListener("loadeddata", this.onLoadedData);
        const ms = this.videoElement.srcObject;
        ms.getTracks().forEach(t => t.stop());
        this.videoElement.srcObject = null;
        this.running = false;
    }
    onLoadedData() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.decodeCanvas || !this.videoElement) {
                this.reject();
                return;
            }
            this.decodeCanvas.height = this.videoElement.videoHeight;
            this.decodeCanvas.width = this.videoElement.videoWidth;
            requestAnimationFrame(this.getOnFrameHandler());
        });
    }
    getOnFrameHandler() {
        if (!this.decodeCanvas) {
            return () => null;
        }
        this.resolve();
        const decodeCtx = this.decodeCanvas.getContext("2d");
        const onFrame = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.decodeCanvas || !this.videoElement) {
                return;
            }
            decodeCtx.drawImage(this.videoElement, 0, 0, this.videoElement.videoWidth, this.videoElement.videoHeight);
            let barcode = null;
            try {
                barcode = yield this.decoder.decode(decodeCtx);
                if (barcode) {
                    this.cb(barcode);
                }
            }
            catch (err) {
                console.log({ decodeError: err.message });
            }
            if (this.running) {
                requestAnimationFrame(onFrame);
            }
        });
        return onFrame;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nhbm5lci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpbXBhY3Rkay9iYXJjb2RlLXNjYW5uZXIvIiwic291cmNlcyI6WyJzcmMvc2Nhbm5lci9zY2FubmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFHQSxNQUFNLE9BQU8sT0FBTztJQVdsQixZQUFvQixZQUE4QixFQUFVLE9BQWlCLEVBQVUsRUFBK0I7UUFBbEcsaUJBQVksR0FBWixZQUFZLENBQWtCO1FBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBVTtRQUFVLE9BQUUsR0FBRixFQUFFLENBQTZCO1FBUjlHLGdCQUFXLEdBQTJCO1lBQzVDLEtBQUssRUFBRTtnQkFDTCxVQUFVLEVBQUUsYUFBYTthQUMxQjtZQUNELEtBQUssRUFBRSxLQUFLO1NBQ2IsQ0FBQztRQUNNLFlBQU8sR0FBRyxLQUFLLENBQUM7UUEyQ2hCLFlBQU8sR0FBZSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7UUFDakMsV0FBTSxHQUEyQixHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7UUF6Q2xELElBQUksQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVyRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFWSxLQUFLOztZQUNoQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztZQUNwQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7WUFFdEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBRXBFLDRCQUE0QjtZQUM1QixJQUFJLENBQUMsWUFBWSxD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O2dCQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7YUFDM0M7WUFFRCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ2hCLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ2hDO1FBQ0gsQ0FBQyxDQUFBLENBQUM7UUFFRixPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJRGVjb2RlciB9IGZyb20gXCIuLi9kZWNvZGVyL2RlY29kZXJcIjtcbmltcG9ydCB7IElCYXJjb2RlIH0gZnJvbSAnLi4vZGVjb2Rlci9iYXJjb2RlJztcblxuZXhwb3J0IGNsYXNzIFNjYW5uZXIge1xuXG4gIHByaXZhdGUgZGVjb2RlQ2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcbiAgcHJpdmF0ZSBjb25zdHJhaW50czogTWVkaWFTdHJlYW1Db25zdHJhaW50cyA9IHtcbiAgICB2aWRlbzoge1xuICAgICAgZmFjaW5nTW9kZTogXCJlbnZpcm9ubWVudFwiXG4gICAgfSxcbiAgICBhdWRpbzogZmFsc2VcbiAgfTtcbiAgcHJpdmF0ZSBydW5uaW5nID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB2aWRlb0VsZW1lbnQ6IEhUTUxWaWRlb0VsZW1lbnQsIHByaXZhdGUgZGVjb2RlcjogSURlY29kZXIsIHByaXZhdGUgY2I6IChiYXJjb2RlOiBJQmFyY29kZSkgPT4gdm9pZCkge1xuICAgIHRoaXMuZGVjb2RlQ2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcblxuICAgIHRoaXMub25Mb2FkZWREYXRhID0gdGhpcy5vbkxvYWRlZERhdGEuYmluZCh0aGlzKTtcbiAgICB0aGlzLmdldE9uRnJhbWVIYW5kbGVyID0gdGhpcy5nZXRPbkZyYW1lSGFuZGxlci5iaW5kKHRoaXMpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHN0YXJ0KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMucnVubmluZyA9IHRydWU7XG4gICAgdGhpcy52aWRlb0VsZW1lbnQgPSB0aGlzLnZpZGVvRWxlbWVudDtcblxuICAgIHRoaXMudmlkZW9FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkZWRkYXRhXCIsIHRoaXMub25Mb2FkZWREYXRhKTtcblxuICAgIC8vIEVuc3VyZSBjb3JyZWN0IGF0dHJpYnV0ZXNcbiAgICB0aGlzLnZpZGVvRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhdXRvcGxheVwiLCBcIlwiKTtcbiAgICB0aGlzLnZpZGVvRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJtdXRlZFwiLCBcIlwiKTtcbiAgICB0aGlzLnZpZGVvRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJwbGF5c2lubGluZVwiLCBcIlwiKTtcblxuICAgIGNvbnN0IHN0cmVhbSA9IGF3YWl0IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHRoaXMuY29uc3RyYWludHMpO1xuXG4gICAgdGhpcy52aWRlb0VsZW1lbnQuc3JjT2JqZWN0ID0gc3RyZWFtO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXMsIHJlaikgPT4ge1xuICAgICAgdGhpcy5yZXNvbHZlID0gcmVzO1xuICAgICAgdGhpcy5yZWplY3QgPSByZWo7XG4gICAgfSk7XG5cbiAgfVxuXG4gIHB1YmxpYyBzdG9wKCkge1xuICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnQgfHwgIXRoaXMudmlkZW9FbGVtZW50LnNyY09iamVjdCkgeyByZXR1cm47IH1cblxuICAgIHRoaXMudmlkZW9FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkZWRkYXRhXCIsIHRoaXMub25Mb2FkZWREYXRhKTtcblxuICAgIGNvbnN0IG1zID0gdGhpcy52aWRlb0VsZW1lbnQuc3JjT2JqZWN0IGFzIE1lZGlhU3RyZWFtO1xuICAgIG1zLmdldFRyYWNrcygpLmZvckVhY2godCA9PiB0LnN0b3AoKSk7XG5cbiAgICB0aGlzLnZpZGVvRWxlbWVudC5zcmNPYmplY3QgPSBudWxsO1xuICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSByZXNvbHZlOiAoKSA9PiB2b2lkID0gKCkgPT4gbnVsbDtcbiAgcHJpdmF0ZSByZWplY3Q6IChyZWFzb24/OiBhbnkpID0+IHZvaWQgPSAoKSA9PiBudWxsO1xuXG4gIHByaXZhdGUgYXN5bmMgb25Mb2FkZWREYXRhKCkge1xuICAgIGlmICghdGhpcy5kZWNvZGVDYW52YXMgfHwgIXRoaXMudmlkZW9FbGVtZW50KSB7IHRoaXMucmVqZWN0KCk7IHJldHVybjsgfVxuXG4gICAgdGhpcy5kZWNvZGVDYW52YXMuaGVpZ2h0ID0gdGhpcy52aWRlb0VsZW1lbnQudmlkZW9IZWlnaHQ7XG4gICAgdGhpcy5kZWNvZGVDYW52YXMud2lkdGggPSB0aGlzLnZpZGVvRWxlbWVudC52aWRlb1dpZHRoO1xuXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuZ2V0T25GcmFtZUhhbmRsZXIoKSk7XG4gIH1cblxuICBwcml2YXRlIGdldE9uRnJhbWVIYW5kbGVyKCk6ICgpID0+IHZvaWQge1xuICAgIGlmICghdGhpcy5kZWNvZGVDYW52YXMpIHsgcmV0dXJuICgpID0+IG51bGw7IH1cblxuICAgIHRoaXMucmVzb2x2ZSgpO1xuXG4gICAgY29uc3QgZGVjb2RlQ3R4ID0gdGhpcy5kZWNvZGVDYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuXG4gICAgY29uc3Qgb25GcmFtZSA9IGFzeW5jICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5kZWNvZGVDYW52YXMgfHwgIXRoaXMudmlkZW9FbGVtZW50KSB7IHJldHVybjsgfVxuXG4gICAgICBkZWNvZGVDdHguZHJhd0ltYWdlKHRoaXMudmlkZW9FbGVtZW50LCAwLCAwLCB0aGlzLnZpZGVvRWxlbWVudC52aWRlb1dpZHRoLCB0aGlzLnZpZGVvRWxlbWVudC52aWRlb0hlaWdodCk7XG4gICAgICBsZXQgYmFyY29kZTogSUJhcmNvZGUgPSBudWxsO1xuXG4gICAgICB0cnkge1xuICAgICAgICBiYXJjb2RlID0gYXdhaXQgdGhpcy5kZWNvZGVyLmRlY29kZShkZWNvZGVDdHgpO1xuXG4gICAgICAgIGlmIChiYXJjb2RlKSB7XG4gICAgICAgICAgdGhpcy5jYihiYXJjb2RlKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHsgZGVjb2RlRXJyb3I6IGVyci5tZXNzYWdlIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5ydW5uaW5nKSB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShvbkZyYW1lKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIG9uRnJhbWU7XG4gIH1cbn1cbiJdfQ==