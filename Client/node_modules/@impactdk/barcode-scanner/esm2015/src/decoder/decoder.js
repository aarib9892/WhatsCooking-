import rawr from "rawr";
import transport from "rawr/transports/worker";
const workerFileName = "wasm-worker.js";
function sanitizeDirString(s) {
    return s.replace(/\/$/, "");
}
export class WasmDecoder {
    constructor(installationDir = "") {
        const workerFilePath = `${installationDir}/${workerFileName}`;
        this.worker = new Worker(workerFilePath);
        this.wasmDecoder = rawr({ transport: transport(this.worker) });
    }
    static getInstance(installationDir = "") {
        if (!WasmDecoder.instance) {
            const sanitized = sanitizeDirString(installationDir);
            WasmDecoder.instance = new WasmDecoder(sanitized);
        }
        return WasmDecoder.instance;
    }
    static removeInstance() {
        WasmDecoder.instance.dispose();
        WasmDecoder.instance = null;
    }
    decode(context) {
        const canvas = context.canvas;
        const width = canvas.width;
        const height = canvas.height;
        const imageData = context.getImageData(0, 0, width, height);
        return this.wasmDecoder.methods.detectUrl(width, height, imageData);
    }
    dispose() {
        this.wasmDecoder = null;
        this.worker.terminate();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb2Rlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpbXBhY3Rkay9iYXJjb2RlLXNjYW5uZXIvIiwic291cmNlcyI6WyJzcmMvZGVjb2Rlci9kZWNvZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLFNBQVMsTUFBTSx3QkFBd0IsQ0FBQztBQUkvQyxNQUFNLGNBQWMsR0FBRyxnQkFBZ0IsQ0FBQztBQU14QyxTQUFTLGlCQUFpQixDQUFDLENBQVM7SUFDbEMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztBQUM5QixDQUFDO0FBRUQsTUFBTSxPQUFPLFdBQVc7SUFLdEIsWUFBb0Isa0JBQTBCLEVBQUU7UUFDOUMsTUFBTSxjQUFjLEdBQUcsR0FBRyxlQUFlLElBQUksY0FBYyxFQUFFLENBQUM7UUFDOUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUV6QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBMEIsRUFBRTtRQUNwRCxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRTtZQUN6QixNQUFNLFNBQVMsR0FBRyxpQkFBaUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUNyRCxXQUFXLENBQUMsUUFBUSxHQUFHLElBQUksV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ25EO1FBRUQsT0FBTyxXQUFXLENBQUMsUUFBUSxDQUFDO0lBQzlCLENBQUM7SUFFTSxNQUFNLENBQUMsY0FBYztRQUMxQixXQUFXLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQy9CLFdBQVcsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQzlCLENBQUM7SUFFTSxNQUFNLENBQUMsT0FBaUM7UUFDN0MsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUM5QixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQzNCLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDN0IsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztRQUU1RCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFTyxPQUFPO1FBQ2IsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUMxQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmF3ciBmcm9tIFwicmF3clwiO1xuaW1wb3J0IHRyYW5zcG9ydCBmcm9tIFwicmF3ci90cmFuc3BvcnRzL3dvcmtlclwiO1xuXG5pbXBvcnQgeyBJQmFyY29kZSB9IGZyb20gJy4vYmFyY29kZSc7XG5cbmNvbnN0IHdvcmtlckZpbGVOYW1lID0gXCJ3YXNtLXdvcmtlci5qc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElEZWNvZGVyIHtcbiAgZGVjb2RlKGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCk6IElCYXJjb2RlO1xufVxuXG5mdW5jdGlvbiBzYW5pdGl6ZURpclN0cmluZyhzOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gcy5yZXBsYWNlKC9cXC8kLywgXCJcIik7XG59XG5cbmV4cG9ydCBjbGFzcyBXYXNtRGVjb2RlciBpbXBsZW1lbnRzIElEZWNvZGVyIHtcbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IFdhc21EZWNvZGVyO1xuICBwcml2YXRlIHdhc21EZWNvZGVyOiBhbnk7XG4gIHByaXZhdGUgd29ya2VyOiBXb3JrZXI7XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihpbnN0YWxsYXRpb25EaXI6IHN0cmluZyA9IFwiXCIpIHtcbiAgICBjb25zdCB3b3JrZXJGaWxlUGF0aCA9IGAke2luc3RhbGxhdGlvbkRpcn0vJHt3b3JrZXJGaWxlTmFtZX1gO1xuICAgIHRoaXMud29ya2VyID0gbmV3IFdvcmtlcih3b3JrZXJGaWxlUGF0aCk7XG5cbiAgICB0aGlzLndhc21EZWNvZGVyID0gcmF3cih7IHRyYW5zcG9ydDogdHJhbnNwb3J0KHRoaXMud29ya2VyKSB9KTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoaW5zdGFsbGF0aW9uRGlyOiBzdHJpbmcgPSBcIlwiKTogV2FzbURlY29kZXIge1xuICAgIGlmICghV2FzbURlY29kZXIuaW5zdGFuY2UpIHtcbiAgICAgIGNvbnN0IHNhbml0aXplZCA9IHNhbml0aXplRGlyU3RyaW5nKGluc3RhbGxhdGlvbkRpcik7XG4gICAgICBXYXNtRGVjb2Rlci5pbnN0YW5jZSA9IG5ldyBXYXNtRGVjb2RlcihzYW5pdGl6ZWQpO1xuICAgIH1cblxuICAgIHJldHVybiBXYXNtRGVjb2Rlci5pbnN0YW5jZTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgcmVtb3ZlSW5zdGFuY2UoKTogdm9pZCB7XG4gICAgV2FzbURlY29kZXIuaW5zdGFuY2UuZGlzcG9zZSgpO1xuICAgIFdhc21EZWNvZGVyLmluc3RhbmNlID0gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyBkZWNvZGUoY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKTogSUJhcmNvZGUge1xuICAgIGNvbnN0IGNhbnZhcyA9IGNvbnRleHQuY2FudmFzO1xuICAgIGNvbnN0IHdpZHRoID0gY2FudmFzLndpZHRoO1xuICAgIGNvbnN0IGhlaWdodCA9IGNhbnZhcy5oZWlnaHQ7XG4gICAgY29uc3QgaW1hZ2VEYXRhID0gY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG5cbiAgICByZXR1cm4gdGhpcy53YXNtRGVjb2Rlci5tZXRob2RzLmRldGVjdFVybCh3aWR0aCwgaGVpZ2h0LCBpbWFnZURhdGEpO1xuICB9XG5cbiAgcHJpdmF0ZSBkaXNwb3NlKCk6IHZvaWQge1xuICAgIHRoaXMud2FzbURlY29kZXIgPSBudWxsO1xuICAgIHRoaXMud29ya2VyLnRlcm1pbmF0ZSgpO1xuICB9XG59XG5cblxuIl19