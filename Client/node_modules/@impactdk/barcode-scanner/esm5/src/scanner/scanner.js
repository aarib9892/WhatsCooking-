import * as tslib_1 from "tslib";
var Scanner = /** @class */ (function () {
    function Scanner(videoElement, decoder, cb) {
        this.videoElement = videoElement;
        this.decoder = decoder;
        this.cb = cb;
        this.constraints = {
            video: {
                facingMode: "environment"
            },
            audio: false
        };
        this.running = false;
        this.resolve = function () { return null; };
        this.reject = function () { return null; };
        this.decodeCanvas = document.createElement("canvas");
        this.onLoadedData = this.onLoadedData.bind(this);
        this.getOnFrameHandler = this.getOnFrameHandler.bind(this);
    }
    Scanner.prototype.start = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var stream;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.running = true;
                        this.videoElement = this.videoElement;
                        this.videoElement.addEventListener("loadeddata", this.onLoadedData);
                        // Ensure correct attributes
                        this.videoElement.setAttribute("autoplay", "");
                        this.videoElement.setAttribute("muted", "");
                        this.videoElement.setAttribute("playsinline", "");
                        return [4 /*yield*/, navigator.mediaDevices.getUserMedia(this.constraints)];
                    case 1:
                        stream = _a.sent();
                        this.videoElement.srcObject = stream;
                        return [2 /*return*/, new Promise(function (res, rej) {
                                _this.resolve = res;
                                _this.reject = rej;
                            })];
                }
            });
        });
    };
    Scanner.prototype.stop = function () {
        if (!this.videoElement || !this.videoElement.srcObject) {
            return;
        }
        this.videoElement.removeEventListener("loadeddata", this.onLoadedData);
        var ms = this.videoElement.srcObject;
        ms.getTracks().forEach(function (t) { return t.stop(); });
        this.videoElement.srcObject = null;
        this.running = false;
    };
    Scanner.prototype.onLoadedData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                if (!this.decodeCanvas || !this.videoElement) {
                    this.reject();
                    return [2 /*return*/];
                }
                this.decodeCanvas.height = this.videoElement.videoHeight;
                this.decodeCanvas.width = this.videoElement.videoWidth;
                requestAnimationFrame(this.getOnFrameHandler());
                return [2 /*return*/];
            });
        });
    };
    Scanner.prototype.getOnFrameHandler = function () {
        var _this = this;
        if (!this.decodeCanvas) {
            return function () { return null; };
        }
        this.resolve();
        var decodeCtx = this.decodeCanvas.getContext("2d");
        var onFrame = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var barcode, err_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.decodeCanvas || !this.videoElement) {
                            return [2 /*return*/];
                        }
                        decodeCtx.drawImage(this.videoElement, 0, 0, this.videoElement.videoWidth, this.videoElement.videoHeight);
                        barcode = null;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.decoder.decode(decodeCtx)];
                    case 2:
                        barcode = _a.sent();
                        if (barcode) {
                            this.cb(barcode);
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        console.log({ decodeError: err_1.message });
                        return [3 /*break*/, 4];
                    case 4:
                        if (this.running) {
                            requestAnimationFrame(onFrame);
                        }
                        return [2 /*return*/];
                }
            });
        }); };
        return onFrame;
    };
    return Scanner;
}());
export { Scanner };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nhbm5lci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpbXBhY3Rkay9iYXJjb2RlLXNjYW5uZXIvIiwic291cmNlcyI6WyJzcmMvc2Nhbm5lci9zY2FubmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFHQTtJQVdFLGlCQUFvQixZQUE4QixFQUFVLE9BQWlCLEVBQVUsRUFBK0I7UUFBbEcsaUJBQVksR0FBWixZQUFZLENBQWtCO1FBQVUsWUFBTyxHQUFQLE9BQU8sQ0FBVTtRQUFVLE9BQUUsR0FBRixFQUFFLENBQTZCO1FBUjlHLGdCQUFXLEdBQTJCO1lBQzVDLEtBQUssRUFBRTtnQkFDTCxVQUFVLEVBQUUsYUFBYTthQUMxQjtZQUNELEtBQUssRUFBRSxLQUFLO1NBQ2IsQ0FBQztRQUNNLFlBQU8sR0FBRyxLQUFLLENBQUM7UUEyQ2hCLFlBQU8sR0FBZSxjQUFNLE9BQUEsSUFBSSxFQUFKLENBQUksQ0FBQztRQUNqQyxXQUFNLEdBQTJCLGNBQU0sT0FBQSxJQUFJLEVBQUosQ0FBSSxDQUFDO1FBekNsRCxJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFckQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRVksdUJBQUssR0FBbEI7Ozs7Ozs7d0JBQ0UsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7d0JBQ3BCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQzt3QkFFdEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO3dCQUVwRSw0QkFBNEI7d0JBQzVCLElBQUks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LENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO3lCQUNsQjs7Ozt3QkFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsV0FBVyxFQUFFLEtBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDOzs7d0JBRzVDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTs0QkFDaEIscUJBQXFCLENBQUMsT0FBTyxDQUFDLENBQUM7eUJBQ2hDOzs7O2FBQ0YsQ0FBQztRQUVGLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFDSCxjQUFDO0FBQUQsQ0FBQyxBQTlGRCxJQThGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElEZWNvZGVyIH0gZnJvbSBcIi4uL2RlY29kZXIvZGVjb2RlclwiO1xuaW1wb3J0IHsgSUJhcmNvZGUgfSBmcm9tICcuLi9kZWNvZGVyL2JhcmNvZGUnO1xuXG5leHBvcnQgY2xhc3MgU2Nhbm5lciB7XG5cbiAgcHJpdmF0ZSBkZWNvZGVDYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xuICBwcml2YXRlIGNvbnN0cmFpbnRzOiBNZWRpYVN0cmVhbUNvbnN0cmFpbnRzID0ge1xuICAgIHZpZGVvOiB7XG4gICAgICBmYWNpbmdNb2RlOiBcImVudmlyb25tZW50XCJcbiAgICB9LFxuICAgIGF1ZGlvOiBmYWxzZVxuICB9O1xuICBwcml2YXRlIHJ1bm5pbmcgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZGVvRWxlbWVudDogSFRNTFZpZGVvRWxlbWVudCwgcHJpdmF0ZSBkZWNvZGVyOiBJRGVjb2RlciwgcHJpdmF0ZSBjYjogKGJhcmNvZGU6IElCYXJjb2RlKSA9PiB2b2lkKSB7XG4gICAgdGhpcy5kZWNvZGVDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuXG4gICAgdGhpcy5vbkxvYWRlZERhdGEgPSB0aGlzLm9uTG9hZGVkRGF0YS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZ2V0T25GcmFtZUhhbmRsZXIgPSB0aGlzLmdldE9uRnJhbWVIYW5kbGVyLmJpbmQodGhpcyk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc3RhcnQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy5ydW5uaW5nID0gdHJ1ZTtcbiAgICB0aGlzLnZpZGVvRWxlbWVudCA9IHRoaXMudmlkZW9FbGVtZW50O1xuXG4gICAgdGhpcy52aWRlb0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRlZGRhdGFcIiwgdGhpcy5vbkxvYWRlZERhdGEpO1xuXG4gICAgLy8gRW5zdXJlIGNvcnJlY3QgYXR0cmlidXRlc1xuICAgIHRoaXMudmlkZW9FbGVtZW50LnNldEF0dHJpYnV0ZShcImF1dG9wbGF5XCIsIFwiXCIpO1xuICAgIHRoaXMudmlkZW9FbGVtZW50LnNldEF0dHJpYnV0ZShcIm11dGVkXCIsIFwiXCIpO1xuICAgIHRoaXMudmlkZW9FbGVtZW50LnNldEF0dHJpYnV0ZShcInBsYXlzaW5saW5lXCIsIFwiXCIpO1xuXG4gICAgY29uc3Qgc3RyZWFtID0gYXdhaXQgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEodGhpcy5jb25zdHJhaW50cyk7XG5cbiAgICB0aGlzLnZpZGVvRWxlbWVudC5zcmNPYmplY3QgPSBzdHJlYW07XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlcywgcmVqKSA9PiB7XG4gICAgICB0aGlzLnJlc29sdmUgPSByZXM7XG4gICAgICB0aGlzLnJlamVjdCA9IHJlajtcbiAgICB9KTtcblxuICB9XG5cbiAgcHVibGljIHN0b3AoKSB7XG4gICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudCB8fCAhdGhpcy52aWRlb0VsZW1lbnQuc3JjT2JqZWN0KSB7IHJldHVybjsgfVxuXG4gICAgdGhpcy52aWRlb0VsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRlZGRhdGFcIiwgdGhpcy5vbkxvYWRlZERhdGEpO1xuXG4gICAgY29uc3QgbXMgPSB0aGlzLnZpZGVvRWxlbWVudC5zcmNPYmplY3QgYXMgTWVkaWFTdHJlYW07XG4gICAgbXMuZ2V0VHJhY2tzKCkuZm9yRWFjaCh0ID0+IHQuc3RvcCgpKTtcblxuICAgIHRoaXMudmlkZW9FbGVtZW50LnNyY09iamVjdCA9IG51bGw7XG4gICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIHJlc29sdmU6ICgpID0+IHZvaWQgPSAoKSA9PiBudWxsO1xuICBwcml2YXRlIHJlamVjdDogKHJlYXNvbj86IGFueSkgPT4gdm9pZCA9ICgpID0+IG51bGw7XG5cbiAgcHJpdmF0ZSBhc3luYyBvbkxvYWRlZERhdGEoKSB7XG4gICAgaWYgKCF0aGlzLmRlY29kZUNhbnZhcyB8fCAhdGhpcy52aWRlb0VsZW1lbnQpIHsgdGhpcy5yZWplY3QoKTsgcmV0dXJuOyB9XG5cbiAgICB0aGlzLmRlY29kZUNhbnZhcy5oZWlnaHQgPSB0aGlzLnZpZGVvRWxlbWVudC52aWRlb0hlaWdodDtcbiAgICB0aGlzLmRlY29kZUNhbnZhcy53aWR0aCA9IHRoaXMudmlkZW9FbGVtZW50LnZpZGVvV2lkdGg7XG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5nZXRPbkZyYW1lSGFuZGxlcigpKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0T25GcmFtZUhhbmRsZXIoKTogKCkgPT4gdm9pZCB7XG4gICAgaWYgKCF0aGlzLmRlY29kZUNhbnZhcykgeyByZXR1cm4gKCkgPT4gbnVsbDsgfVxuXG4gICAgdGhpcy5yZXNvbHZlKCk7XG5cbiAgICBjb25zdCBkZWNvZGVDdHggPSB0aGlzLmRlY29kZUNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG5cbiAgICBjb25zdCBvbkZyYW1lID0gYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLmRlY29kZUNhbnZhcyB8fCAhdGhpcy52aWRlb0VsZW1lbnQpIHsgcmV0dXJuOyB9XG5cbiAgICAgIGRlY29kZUN0eC5kcmF3SW1hZ2UodGhpcy52aWRlb0VsZW1lbnQsIDAsIDAsIHRoaXMudmlkZW9FbGVtZW50LnZpZGVvV2lkdGgsIHRoaXMudmlkZW9FbGVtZW50LnZpZGVvSGVpZ2h0KTtcbiAgICAgIGxldCBiYXJjb2RlOiBJQmFyY29kZSA9IG51bGw7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGJhcmNvZGUgPSBhd2FpdCB0aGlzLmRlY29kZXIuZGVjb2RlKGRlY29kZUN0eCk7XG5cbiAgICAgICAgaWYgKGJhcmNvZGUpIHtcbiAgICAgICAgICB0aGlzLmNiKGJhcmNvZGUpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coeyBkZWNvZGVFcnJvcjogZXJyLm1lc3NhZ2UgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnJ1bm5pbmcpIHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKG9uRnJhbWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gb25GcmFtZTtcbiAgfVxufVxuIl19