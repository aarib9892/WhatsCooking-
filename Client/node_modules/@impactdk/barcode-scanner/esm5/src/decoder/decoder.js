import rawr from "rawr";
import transport from "rawr/transports/worker";
var workerFileName = "wasm-worker.js";
function sanitizeDirString(s) {
    return s.replace(/\/$/, "");
}
var WasmDecoder = /** @class */ (function () {
    function WasmDecoder(installationDir) {
        if (installationDir === void 0) { installationDir = ""; }
        var workerFilePath = installationDir + "/" + workerFileName;
        this.worker = new Worker(workerFilePath);
        this.wasmDecoder = rawr({ transport: transport(this.worker) });
    }
    WasmDecoder.getInstance = function (installationDir) {
        if (installationDir === void 0) { installationDir = ""; }
        if (!WasmDecoder.instance) {
            var sanitized = sanitizeDirString(installationDir);
            WasmDecoder.instance = new WasmDecoder(sanitized);
        }
        return WasmDecoder.instance;
    };
    WasmDecoder.removeInstance = function () {
        WasmDecoder.instance.dispose();
        WasmDecoder.instance = null;
    };
    WasmDecoder.prototype.decode = function (context) {
        var canvas = context.canvas;
        var width = canvas.width;
        var height = canvas.height;
        var imageData = context.getImageData(0, 0, width, height);
        return this.wasmDecoder.methods.detectUrl(width, height, imageData);
    };
    WasmDecoder.prototype.dispose = function () {
        this.wasmDecoder = null;
        this.worker.terminate();
    };
    return WasmDecoder;
}());
export { WasmDecoder };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb2Rlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpbXBhY3Rkay9iYXJjb2RlLXNjYW5uZXIvIiwic291cmNlcyI6WyJzcmMvZGVjb2Rlci9kZWNvZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLFNBQVMsTUFBTSx3QkFBd0IsQ0FBQztBQUkvQyxJQUFNLGNBQWMsR0FBRyxnQkFBZ0IsQ0FBQztBQU14QyxTQUFTLGlCQUFpQixDQUFDLENBQVM7SUFDbEMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztBQUM5QixDQUFDO0FBRUQ7SUFLRSxxQkFBb0IsZUFBNEI7UUFBNUIsZ0NBQUEsRUFBQSxvQkFBNEI7UUFDOUMsSUFBTSxjQUFjLEdBQU0sZUFBZSxTQUFJLGNBQWdCLENBQUM7UUFDOUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUV6QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRWEsdUJBQVcsR0FBekIsVUFBMEIsZUFBNEI7UUFBNUIsZ0NBQUEsRUFBQSxvQkFBNEI7UUFDcEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUU7WUFDekIsSUFBTSxTQUFTLEdBQUcsaUJBQWlCLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDckQsV0FBVyxDQUFDLFFBQVEsR0FBRyxJQUFJLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNuRDtRQUVELE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQztJQUM5QixDQUFDO0lBRWEsMEJBQWMsR0FBNUI7UUFDRSxXQUFXLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQy9CLFdBQVcsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQzlCLENBQUM7SUFFTSw0QkFBTSxHQUFiLFVBQWMsT0FBaUM7UUFDN0MsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUM5QixJQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQzNCLElBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDN0IsSUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztRQUU1RCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFTyw2QkFBTyxHQUFmO1FBQ0UsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBQ0gsa0JBQUM7QUFBRCxDQUFDLEFBdkNELElBdUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJhd3IgZnJvbSBcInJhd3JcIjtcbmltcG9ydCB0cmFuc3BvcnQgZnJvbSBcInJhd3IvdHJhbnNwb3J0cy93b3JrZXJcIjtcblxuaW1wb3J0IHsgSUJhcmNvZGUgfSBmcm9tICcuL2JhcmNvZGUnO1xuXG5jb25zdCB3b3JrZXJGaWxlTmFtZSA9IFwid2FzbS13b3JrZXIuanNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJRGVjb2RlciB7XG4gIGRlY29kZShjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpOiBJQmFyY29kZTtcbn1cblxuZnVuY3Rpb24gc2FuaXRpemVEaXJTdHJpbmcoczogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHMucmVwbGFjZSgvXFwvJC8sIFwiXCIpO1xufVxuXG5leHBvcnQgY2xhc3MgV2FzbURlY29kZXIgaW1wbGVtZW50cyBJRGVjb2RlciB7XG4gIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBXYXNtRGVjb2RlcjtcbiAgcHJpdmF0ZSB3YXNtRGVjb2RlcjogYW55O1xuICBwcml2YXRlIHdvcmtlcjogV29ya2VyO1xuXG4gIHByaXZhdGUgY29uc3RydWN0b3IoaW5zdGFsbGF0aW9uRGlyOiBzdHJpbmcgPSBcIlwiKSB7XG4gICAgY29uc3Qgd29ya2VyRmlsZVBhdGggPSBgJHtpbnN0YWxsYXRpb25EaXJ9LyR7d29ya2VyRmlsZU5hbWV9YDtcbiAgICB0aGlzLndvcmtlciA9IG5ldyBXb3JrZXIod29ya2VyRmlsZVBhdGgpO1xuXG4gICAgdGhpcy53YXNtRGVjb2RlciA9IHJhd3IoeyB0cmFuc3BvcnQ6IHRyYW5zcG9ydCh0aGlzLndvcmtlcikgfSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKGluc3RhbGxhdGlvbkRpcjogc3RyaW5nID0gXCJcIik6IFdhc21EZWNvZGVyIHtcbiAgICBpZiAoIVdhc21EZWNvZGVyLmluc3RhbmNlKSB7XG4gICAgICBjb25zdCBzYW5pdGl6ZWQgPSBzYW5pdGl6ZURpclN0cmluZyhpbnN0YWxsYXRpb25EaXIpO1xuICAgICAgV2FzbURlY29kZXIuaW5zdGFuY2UgPSBuZXcgV2FzbURlY29kZXIoc2FuaXRpemVkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gV2FzbURlY29kZXIuaW5zdGFuY2U7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHJlbW92ZUluc3RhbmNlKCk6IHZvaWQge1xuICAgIFdhc21EZWNvZGVyLmluc3RhbmNlLmRpc3Bvc2UoKTtcbiAgICBXYXNtRGVjb2Rlci5pbnN0YW5jZSA9IG51bGw7XG4gIH1cblxuICBwdWJsaWMgZGVjb2RlKGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCk6IElCYXJjb2RlIHtcbiAgICBjb25zdCBjYW52YXMgPSBjb250ZXh0LmNhbnZhcztcbiAgICBjb25zdCB3aWR0aCA9IGNhbnZhcy53aWR0aDtcbiAgICBjb25zdCBoZWlnaHQgPSBjYW52YXMuaGVpZ2h0O1xuICAgIGNvbnN0IGltYWdlRGF0YSA9IGNvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgcmV0dXJuIHRoaXMud2FzbURlY29kZXIubWV0aG9kcy5kZXRlY3RVcmwod2lkdGgsIGhlaWdodCwgaW1hZ2VEYXRhKTtcbiAgfVxuXG4gIHByaXZhdGUgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICB0aGlzLndhc21EZWNvZGVyID0gbnVsbDtcbiAgICB0aGlzLndvcmtlci50ZXJtaW5hdGUoKTtcbiAgfVxufVxuXG5cbiJdfQ==