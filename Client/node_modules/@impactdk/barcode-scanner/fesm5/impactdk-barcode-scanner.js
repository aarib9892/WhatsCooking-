import { __awaiter, __generator } from 'tslib';
import rawr from 'rawr';
import transport from 'rawr/transports/worker';

var Scanner = /** @class */ (function () {
    function Scanner(videoElement, decoder, cb) {
        this.videoElement = videoElement;
        this.decoder = decoder;
        this.cb = cb;
        this.constraints = {
            video: {
                facingMode: "environment"
            },
            audio: false
        };
        this.running = false;
        this.resolve = function () { return null; };
        this.reject = function () { return null; };
        this.decodeCanvas = document.createElement("canvas");
        this.onLoadedData = this.onLoadedData.bind(this);
        this.getOnFrameHandler = this.getOnFrameHandler.bind(this);
    }
    Scanner.prototype.start = function () {
        return __awaiter(this, void 0, void 0, function () {
            var stream;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.running = true;
                        this.videoElement = this.videoElement;
                        this.videoElement.addEventListener("loadeddata", this.onLoadedData);
                        // Ensure correct attributes
                        this.videoElement.setAttribute("autoplay", "");
                        this.videoElement.setAttribute("muted", "");
                        this.videoElement.setAttribute("playsinline", "");
                        return [4 /*yield*/, navigator.mediaDevices.getUserMedia(this.constraints)];
                    case 1:
                        stream = _a.sent();
                        this.videoElement.srcObject = stream;
                        return [2 /*return*/, new Promise(function (res, rej) {
                                _this.resolve = res;
                                _this.reject = rej;
                            })];
                }
            });
        });
    };
    Scanner.prototype.stop = function () {
        if (!this.videoElement || !this.videoElement.srcObject) {
            return;
        }
        this.videoElement.removeEventListener("loadeddata", this.onLoadedData);
        var ms = this.videoElement.srcObject;
        ms.getTracks().forEach(function (t) { return t.stop(); });
        this.videoElement.srcObject = null;
        this.running = false;
    };
    Scanner.prototype.onLoadedData = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.decodeCanvas || !this.videoElement) {
                    this.reject();
                    return [2 /*return*/];
                }
                this.decodeCanvas.height = this.videoElement.videoHeight;
                this.decodeCanvas.width = this.videoElement.videoWidth;
                requestAnimationFrame(this.getOnFrameHandler());
                return [2 /*return*/];
            });
        });
    };
    Scanner.prototype.getOnFrameHandler = function () {
        var _this = this;
        if (!this.decodeCanvas) {
            return function () { return null; };
        }
        this.resolve();
        var decodeCtx = this.decodeCanvas.getContext("2d");
        var onFrame = function () { return __awaiter(_this, void 0, void 0, function () {
            var barcode, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.decodeCanvas || !this.videoElement) {
                            return [2 /*return*/];
                        }
                        decodeCtx.drawImage(this.videoElement, 0, 0, this.videoElement.videoWidth, this.videoElement.videoHeight);
                        barcode = null;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.decoder.decode(decodeCtx)];
                    case 2:
                        barcode = _a.sent();
                        if (barcode) {
                            this.cb(barcode);
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        console.log({ decodeError: err_1.message });
                        return [3 /*break*/, 4];
                    case 4:
                        if (this.running) {
                            requestAnimationFrame(onFrame);
                        }
                        return [2 /*return*/];
                }
            });
        }); };
        return onFrame;
    };
    return Scanner;
}());

var workerFileName = "wasm-worker.js";
function sanitizeDirString(s) {
    return s.replace(/\/$/, "");
}
var WasmDecoder = /** @class */ (function () {
    function WasmDecoder(installationDir) {
        if (installationDir === void 0) { installationDir = ""; }
        var workerFilePath = installationDir + "/" + workerFileName;
        this.worker = new Worker(workerFilePath);
        this.wasmDecoder = rawr({ transport: transport(this.worker) });
    }
    WasmDecoder.getInstance = function (installationDir) {
        if (installationDir === void 0) { installationDir = ""; }
        if (!WasmDecoder.instance) {
            var sanitized = sanitizeDirString(installationDir);
            WasmDecoder.instance = new WasmDecoder(sanitized);
        }
        return WasmDecoder.instance;
    };
    WasmDecoder.removeInstance = function () {
        WasmDecoder.instance.dispose();
        WasmDecoder.instance = null;
    };
    WasmDecoder.prototype.decode = function (context) {
        var canvas = context.canvas;
        var width = canvas.width;
        var height = canvas.height;
        var imageData = context.getImageData(0, 0, width, height);
        return this.wasmDecoder.methods.detectUrl(width, height, imageData);
    };
    WasmDecoder.prototype.dispose = function () {
        this.wasmDecoder = null;
        this.worker.terminate();
    };
    return WasmDecoder;
}());

export { Scanner, WasmDecoder };
//# sourceMappingURL=impactdk-barcode-scanner.js.map
