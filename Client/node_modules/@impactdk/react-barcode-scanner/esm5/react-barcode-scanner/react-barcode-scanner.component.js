import * as tslib_1 from "tslib";
import React, { useEffect, useRef, forwardRef, useImperativeHandle } from "react";
import { Scanner } from "@impactdk/barcode-scanner";
var videoId = "scanner-video";
/**
 * @example
 * import { WasmDecoder } from "@impactdk/barcode-scanner";
 * import { ReactBarcodeScanner, IReactBarcodeScannerRef } from "@impactdk/react-barcode-scanner";
 *
 * const scannerRef = useRef<IReactBarcodeScannerRef>(); // Access to public API, i.e. scannerRef?.start() or scannerRef?.stop().
 *
 * const decoder = WasmDecoder.getInstance("/public-path/asssets/barcode-scanner"); // Path to installed assets.
 *
 * return <ReactBarcodeScanner decoder={decoder} onFindBarcode={setBarcode} ref={scannerRef} />;
 */
export var ReactBarcodeScanner = forwardRef(function (props, ref) {
    var videoProps = props.videoProps, onFindBarcode = props.onFindBarcode, decoder = props.decoder, _a = props.initOnMount, initOnMount = _a === void 0 ? true : _a;
    var scannerRef = useRef(null);
    useEffect(function () {
        if (initOnMount) {
            startScanner();
        }
        return handleUnmount;
    }, []);
    useImperativeHandle(ref, function () { return ({
        start: startScanner,
        stop: stopScanner
    }); });
    function startScanner() {
        if (scannerRef.current) {
            return;
        }
        var video = document.getElementById(videoId);
        scannerRef.current = new Scanner(video, decoder, (function () {
            var previousValue;
            return function (_a) {
                var rawValue = _a.rawValue;
                // Compare with previous value, to ensure the correct one has been found.
                if (!previousValue || rawValue !== previousValue) {
                    previousValue = rawValue;
                    return;
                }
                onFindBarcode(rawValue);
            };
        })());
        scannerRef.current.start();
    }
    function stopScanner() {
        if (scannerRef.current != null) {
            scannerRef.current.stop();
            scannerRef.current = null;
        }
    }
    function handleUnmount() {
        stopScanner();
    }
    return (React.createElement("video", tslib_1.__assign({}, videoProps, { id: videoId })));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhY3QtYmFyY29kZS1zY2FubmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpbXBhY3Rkay9yZWFjdC1iYXJjb2RlLXNjYW5uZXIvIiwic291cmNlcyI6WyJyZWFjdC1iYXJjb2RlLXNjYW5uZXIvcmVhY3QtYmFyY29kZS1zY2FubmVyLmNvbXBvbmVudC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDbEYsT0FBTyxFQUFZLE9BQU8sRUFBWSxNQUFNLDJCQUEyQixDQUFDO0FBdUN4RSxJQUFNLE9BQU8sR0FBRyxlQUFlLENBQUM7QUFFaEM7Ozs7Ozs7Ozs7R0FVRztBQUNILE1BQU0sQ0FBQyxJQUFNLG1CQUFtQixHQUFHLFVBQVUsQ0FBcUQsVUFBQyxLQUFLLEVBQUUsR0FBRztJQUNuRyxJQUFBLDZCQUFVLEVBQUUsbUNBQWEsRUFBRSx1QkFBTyxFQUFFLHNCQUFrQixFQUFsQix1Q0FBa0IsQ0FBVztJQUV6RSxJQUFNLFVBQVUsR0FBRyxNQUFNLENBQWlCLElBQUksQ0FBQyxDQUFDO0lBRWhELFNBQVMsQ0FBQztRQUNSLElBQUksV0FBVyxFQUFFO1lBQ2YsWUFBWSxFQUFFLENBQUM7U0FDaEI7UUFFRCxPQUFPLGFBQWEsQ0FBQztJQUN2QixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFUCxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsY0FBTSxPQUFBLENBQUM7UUFDOUIsS0FBSyxFQUFFLFlBQVk7UUFDbkIsSUFBSSxFQUFFLFdBQVc7S0FDbEIsQ0FBQyxFQUg2QixDQUc3QixDQUFDLENBQUM7SUFFSixTQUFTLFlBQVk7UUFDbkIsSUFBSSxVQUFVLENBQUMsT0FBTyxFQUFFO1lBQ3RCLE9BQU87U0FDUjtRQUVELElBQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFxQixDQUFDO1FBRW5FLFVBQVUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFDO1lBQ2hELElBQUksYUFBcUIsQ0FBQztZQUUxQixPQUFPLFVBQUMsRUFBc0I7b0JBQXBCLHNCQUFRO2dCQUNoQix5RUFBeUU7Z0JBQ3pFLElBQUksQ0FBQyxhQUFhLElBQUksUUFBUSxLQUFLLGFBQWEsRUFBRTtvQkFDaEQsYUFBYSxHQUFHLFFBQVEsQ0FBQztvQkFDekIsT0FBTztpQkFDUjtnQkFFRCxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDMUIsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRU4sVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsU0FBUyxXQUFXO1FBQ2xCLElBQUksVUFBVSxDQUFDLE9BQU8sSUFBSSxJQUFJLEVBQUU7WUFDOUIsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUMxQixVQUFVLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztTQUMzQjtJQUNILENBQUM7SUFFRCxTQUFTLGFBQWE7UUFDcEIsV0FBVyxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVELE9BQU8sQ0FDTCxrREFBVyxVQUFVLElBQUUsRUFBRSxFQUFFLE9BQU8sSUFBSSxDQUN2QyxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VSZWYsIGZvcndhcmRSZWYsIHVzZUltcGVyYXRpdmVIYW5kbGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IElCYXJjb2RlLCBTY2FubmVyLCBJRGVjb2RlciB9IGZyb20gXCJAaW1wYWN0ZGsvYmFyY29kZS1zY2FubmVyXCI7XG5cbnR5cGUgT21pdDxULCBLIGV4dGVuZHMga2V5b2YgVD4gPSBQaWNrPFQsIEV4Y2x1ZGU8a2V5b2YgVCwgSz4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIElSZWFjdEJhcmNvZGVTY2FubmVyUmVmIHtcbiAgc3RhcnQoKTogdm9pZDtcbiAgc3RvcCgpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElSZWFjdEJhcmNvZGVTY2FubmVyUHJvcHMge1xuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFByb3BzIHBhc3NlZCB0byB1bmRlcmx5aW5nIHZpZGVvIGVsZW1lbnQuIElEIGlzIHJlc2VydmVkIGZvciBET00gYWNjZXNzLlxuICAgKi9cbiAgdmlkZW9Qcm9wcz86IE9taXQ8UmVhY3QuVmlkZW9IVE1MQXR0cmlidXRlczxIVE1MVmlkZW9FbGVtZW50PiwgXCJpZFwiIHwgXCJzcmNcIj47XG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ2FsbGJhY2sgZm9yIHdoZW4gYmFyY29kZSBpcyBpZGVudGlmaWVkLlxuICAgKi9cbiAgb25GaW5kQmFyY29kZTogKGJhcmNvZGU6IHN0cmluZykgPT4gdm9pZDtcbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTdXBwbHkgZGVjb2RlciByZXNwb25zaWJsZSBmb3IgZGVjb2RpbmcgdGhlIGNhbnZhcyBjb250ZXh0IG1hZGUgYnkgdGhlIHNjYW5uZXIuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGltcG9ydCB7IFdhc21EZWNvZGVyIH0gZnJvbSBcIkBpbXBhY3Rkay9iYXJjb2RlLXNjYW5uZXJcIjtcbiAgICpcbiAgICogY29uc3QgZGVjb2RlciA9IFdhc21EZWNvZGVyLmdldEluc3RhbmNlKFwiL3B1YmxpYy1wYXRoL2Fzc2V0c1wiKTsgLy8gUGF0aCB0byBhc3NldHMgaW5zdGFsbGVkIHRocm91Z2ggaW5jbHVkZWQgY2xpLlxuICAgKi9cbiAgZGVjb2RlcjogSURlY29kZXI7XG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSWYgZmFsc2UsIHRoZSBjb25zdW1lciBpcyByZXNwb25zaWJsZSBmb3Igc3RhcnRpbmcgdGhlIHNjYW5uZXIgdGhyb3VnaCByZWYgcHVibGljIEFQSS5cbiAgICpcbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgaW5pdE9uTW91bnQ/OiBib29sZWFuO1xufVxuXG5jb25zdCB2aWRlb0lkID0gXCJzY2FubmVyLXZpZGVvXCI7XG5cbi8qKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IFdhc21EZWNvZGVyIH0gZnJvbSBcIkBpbXBhY3Rkay9iYXJjb2RlLXNjYW5uZXJcIjtcbiAqIGltcG9ydCB7IFJlYWN0QmFyY29kZVNjYW5uZXIsIElSZWFjdEJhcmNvZGVTY2FubmVyUmVmIH0gZnJvbSBcIkBpbXBhY3Rkay9yZWFjdC1iYXJjb2RlLXNjYW5uZXJcIjtcbiAqXG4gKiBjb25zdCBzY2FubmVyUmVmID0gdXNlUmVmPElSZWFjdEJhcmNvZGVTY2FubmVyUmVmPigpOyAvLyBBY2Nlc3MgdG8gcHVibGljIEFQSSwgaS5lLiBzY2FubmVyUmVmPy5zdGFydCgpIG9yIHNjYW5uZXJSZWY/LnN0b3AoKS5cbiAqXG4gKiBjb25zdCBkZWNvZGVyID0gV2FzbURlY29kZXIuZ2V0SW5zdGFuY2UoXCIvcHVibGljLXBhdGgvYXNzc2V0cy9iYXJjb2RlLXNjYW5uZXJcIik7IC8vIFBhdGggdG8gaW5zdGFsbGVkIGFzc2V0cy5cbiAqXG4gKiByZXR1cm4gPFJlYWN0QmFyY29kZVNjYW5uZXIgZGVjb2Rlcj17ZGVjb2Rlcn0gb25GaW5kQmFyY29kZT17c2V0QmFyY29kZX0gcmVmPXtzY2FubmVyUmVmfSAvPjtcbiAqL1xuZXhwb3J0IGNvbnN0IFJlYWN0QmFyY29kZVNjYW5uZXIgPSBmb3J3YXJkUmVmPElSZWFjdEJhcmNvZGVTY2FubmVyUmVmLCBJUmVhY3RCYXJjb2RlU2Nhbm5lclByb3BzPigocHJvcHMsIHJlZikgPT4ge1xuICBjb25zdCB7IHZpZGVvUHJvcHMsIG9uRmluZEJhcmNvZGUsIGRlY29kZXIsIGluaXRPbk1vdW50ID0gdHJ1ZSB9ID0gcHJvcHM7XG5cbiAgY29uc3Qgc2Nhbm5lclJlZiA9IHVzZVJlZjxTY2FubmVyIHwgbnVsbD4obnVsbCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaW5pdE9uTW91bnQpIHtcbiAgICAgIHN0YXJ0U2Nhbm5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBoYW5kbGVVbm1vdW50O1xuICB9LCBbXSk7XG5cbiAgdXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsICgpID0+ICh7XG4gICAgc3RhcnQ6IHN0YXJ0U2Nhbm5lcixcbiAgICBzdG9wOiBzdG9wU2Nhbm5lclxuICB9KSk7XG5cbiAgZnVuY3Rpb24gc3RhcnRTY2FubmVyKCk6IHZvaWQge1xuICAgIGlmIChzY2FubmVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB2aWRlbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHZpZGVvSWQpIGFzIEhUTUxWaWRlb0VsZW1lbnQ7XG5cbiAgICBzY2FubmVyUmVmLmN1cnJlbnQgPSBuZXcgU2Nhbm5lcih2aWRlbywgZGVjb2RlciwgKCgpID0+IHtcbiAgICAgIGxldCBwcmV2aW91c1ZhbHVlOiBzdHJpbmc7XG5cbiAgICAgIHJldHVybiAoeyByYXdWYWx1ZSB9OiBJQmFyY29kZSkgPT4ge1xuICAgICAgICAvLyBDb21wYXJlIHdpdGggcHJldmlvdXMgdmFsdWUsIHRvIGVuc3VyZSB0aGUgY29ycmVjdCBvbmUgaGFzIGJlZW4gZm91bmQuXG4gICAgICAgIGlmICghcHJldmlvdXNWYWx1ZSB8fCByYXdWYWx1ZSAhPT0gcHJldmlvdXNWYWx1ZSkge1xuICAgICAgICAgIHByZXZpb3VzVmFsdWUgPSByYXdWYWx1ZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBvbkZpbmRCYXJjb2RlKHJhd1ZhbHVlKTtcbiAgICAgIH07XG4gICAgfSkoKSk7XG5cbiAgICBzY2FubmVyUmVmLmN1cnJlbnQuc3RhcnQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0b3BTY2FubmVyKCk6IHZvaWQge1xuICAgIGlmIChzY2FubmVyUmVmLmN1cnJlbnQgIT0gbnVsbCkge1xuICAgICAgc2Nhbm5lclJlZi5jdXJyZW50LnN0b3AoKTtcbiAgICAgIHNjYW5uZXJSZWYuY3VycmVudCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlVW5tb3VudCgpOiB2b2lkIHtcbiAgICBzdG9wU2Nhbm5lcigpO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8dmlkZW8gey4uLnZpZGVvUHJvcHN9IGlkPXt2aWRlb0lkfSAvPlxuICApO1xufSk7XG4iXX0=