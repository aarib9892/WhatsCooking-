import React, { useEffect, useRef, forwardRef, useImperativeHandle } from "react";
import { Scanner } from "@impactdk/barcode-scanner";
const videoId = "scanner-video";
/**
 * @example
 * import { WasmDecoder } from "@impactdk/barcode-scanner";
 * import { ReactBarcodeScanner, IReactBarcodeScannerRef } from "@impactdk/react-barcode-scanner";
 *
 * const scannerRef = useRef<IReactBarcodeScannerRef>(); // Access to public API, i.e. scannerRef?.start() or scannerRef?.stop().
 *
 * const decoder = WasmDecoder.getInstance("/public-path/asssets/barcode-scanner"); // Path to installed assets.
 *
 * return <ReactBarcodeScanner decoder={decoder} onFindBarcode={setBarcode} ref={scannerRef} />;
 */
export const ReactBarcodeScanner = forwardRef((props, ref) => {
    const { videoProps, onFindBarcode, decoder, initOnMount = true } = props;
    const scannerRef = useRef(null);
    useEffect(() => {
        if (initOnMount) {
            startScanner();
        }
        return handleUnmount;
    }, []);
    useImperativeHandle(ref, () => ({
        start: startScanner,
        stop: stopScanner
    }));
    function startScanner() {
        if (scannerRef.current) {
            return;
        }
        const video = document.getElementById(videoId);
        scannerRef.current = new Scanner(video, decoder, (() => {
            let previousValue;
            return ({ rawValue }) => {
                // Compare with previous value, to ensure the correct one has been found.
                if (!previousValue || rawValue !== previousValue) {
                    previousValue = rawValue;
                    return;
                }
                onFindBarcode(rawValue);
            };
        })());
        scannerRef.current.start();
    }
    function stopScanner() {
        if (scannerRef.current != null) {
            scannerRef.current.stop();
            scannerRef.current = null;
        }
    }
    function handleUnmount() {
        stopScanner();
    }
    return (React.createElement("video", Object.assign({}, videoProps, { id: videoId })));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhY3QtYmFyY29kZS1zY2FubmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpbXBhY3Rkay9yZWFjdC1iYXJjb2RlLXNjYW5uZXIvIiwic291cmNlcyI6WyJyZWFjdC1iYXJjb2RlLXNjYW5uZXIvcmVhY3QtYmFyY29kZS1zY2FubmVyLmNvbXBvbmVudC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEVBQUUsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUNsRixPQUFPLEVBQVksT0FBTyxFQUFZLE1BQU0sMkJBQTJCLENBQUM7QUF1Q3hFLE1BQU0sT0FBTyxHQUFHLGVBQWUsQ0FBQztBQUVoQzs7Ozs7Ozs7OztHQVVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsVUFBVSxDQUFxRCxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUMvRyxNQUFNLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsV0FBVyxHQUFHLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQztJQUV6RSxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQWlCLElBQUksQ0FBQyxDQUFDO0lBRWhELFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDYixJQUFJLFdBQVcsRUFBRTtZQUNmLFlBQVksRUFBRSxDQUFDO1NBQ2hCO1FBRUQsT0FBTyxhQUFhLENBQUM7SUFDdkIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRVAsbUJBQW1CLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDOUIsS0FBSyxFQUFFLFlBQVk7UUFDbkIsSUFBSSxFQUFFLFdBQVc7S0FDbEIsQ0FBQyxDQUFDLENBQUM7SUFFSixTQUFTLFlBQVk7UUFDbkIsSUFBSSxVQUFVLENBQUMsT0FBTyxFQUFFO1lBQ3RCLE9BQU87U0FDUjtRQUVELE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFxQixDQUFDO1FBRW5FLFVBQVUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFDLEdBQUcsRUFBRTtZQUNyRCxJQUFJLGFBQXFCLENBQUM7WUFFMUIsT0FBTyxDQUFDLEVBQUUsUUFBUSxFQUFZLEVBQUUsRUFBRTtnQkFDaEMseUVBQXlFO2dCQUN6RSxJQUFJLENBQUMsYUFBYSxJQUFJLFFBQVEsS0FBSyxhQUFhLEVBQUU7b0JBQ2hELGFBQWEsR0FBRyxRQUFRLENBQUM7b0JBQ3pCLE9BQU87aUJBQ1I7Z0JBRUQsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzFCLENBQUMsQ0FBQztRQUNKLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVOLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELFNBQVMsV0FBVztRQUNsQixJQUFJLFVBQVUsQ0FBQyxPQUFPLElBQUksSUFBSSxFQUFFO1lBQzlCLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDMUIsVUFBVSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7U0FDM0I7SUFDSCxDQUFDO0lBRUQsU0FBUyxhQUFhO1FBQ3BCLFdBQVcsRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxPQUFPLENBQ0wsK0NBQVcsVUFBVSxJQUFFLEVBQUUsRUFBRSxPQUFPLElBQUksQ0FDdkMsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlUmVmLCBmb3J3YXJkUmVmLCB1c2VJbXBlcmF0aXZlSGFuZGxlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBJQmFyY29kZSwgU2Nhbm5lciwgSURlY29kZXIgfSBmcm9tIFwiQGltcGFjdGRrL2JhcmNvZGUtc2Nhbm5lclwiO1xuXG50eXBlIE9taXQ8VCwgSyBleHRlbmRzIGtleW9mIFQ+ID0gUGljazxULCBFeGNsdWRlPGtleW9mIFQsIEs+PjtcblxuZXhwb3J0IGludGVyZmFjZSBJUmVhY3RCYXJjb2RlU2Nhbm5lclJlZiB7XG4gIHN0YXJ0KCk6IHZvaWQ7XG4gIHN0b3AoKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUmVhY3RCYXJjb2RlU2Nhbm5lclByb3BzIHtcbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBQcm9wcyBwYXNzZWQgdG8gdW5kZXJseWluZyB2aWRlbyBlbGVtZW50LiBJRCBpcyByZXNlcnZlZCBmb3IgRE9NIGFjY2Vzcy5cbiAgICovXG4gIHZpZGVvUHJvcHM/OiBPbWl0PFJlYWN0LlZpZGVvSFRNTEF0dHJpYnV0ZXM8SFRNTFZpZGVvRWxlbWVudD4sIFwiaWRcIiB8IFwic3JjXCI+O1xuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENhbGxiYWNrIGZvciB3aGVuIGJhcmNvZGUgaXMgaWRlbnRpZmllZC5cbiAgICovXG4gIG9uRmluZEJhcmNvZGU6IChiYXJjb2RlOiBzdHJpbmcpID0+IHZvaWQ7XG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3VwcGx5IGRlY29kZXIgcmVzcG9uc2libGUgZm9yIGRlY29kaW5nIHRoZSBjYW52YXMgY29udGV4dCBtYWRlIGJ5IHRoZSBzY2FubmVyLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBpbXBvcnQgeyBXYXNtRGVjb2RlciB9IGZyb20gXCJAaW1wYWN0ZGsvYmFyY29kZS1zY2FubmVyXCI7XG4gICAqXG4gICAqIGNvbnN0IGRlY29kZXIgPSBXYXNtRGVjb2Rlci5nZXRJbnN0YW5jZShcIi9wdWJsaWMtcGF0aC9hc3NldHNcIik7IC8vIFBhdGggdG8gYXNzZXRzIGluc3RhbGxlZCB0aHJvdWdoIGluY2x1ZGVkIGNsaS5cbiAgICovXG4gIGRlY29kZXI6IElEZWNvZGVyO1xuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIElmIGZhbHNlLCB0aGUgY29uc3VtZXIgaXMgcmVzcG9uc2libGUgZm9yIHN0YXJ0aW5nIHRoZSBzY2FubmVyIHRocm91Z2ggcmVmIHB1YmxpYyBBUEkuXG4gICAqXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGluaXRPbk1vdW50PzogYm9vbGVhbjtcbn1cblxuY29uc3QgdmlkZW9JZCA9IFwic2Nhbm5lci12aWRlb1wiO1xuXG4vKipcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBXYXNtRGVjb2RlciB9IGZyb20gXCJAaW1wYWN0ZGsvYmFyY29kZS1zY2FubmVyXCI7XG4gKiBpbXBvcnQgeyBSZWFjdEJhcmNvZGVTY2FubmVyLCBJUmVhY3RCYXJjb2RlU2Nhbm5lclJlZiB9IGZyb20gXCJAaW1wYWN0ZGsvcmVhY3QtYmFyY29kZS1zY2FubmVyXCI7XG4gKlxuICogY29uc3Qgc2Nhbm5lclJlZiA9IHVzZVJlZjxJUmVhY3RCYXJjb2RlU2Nhbm5lclJlZj4oKTsgLy8gQWNjZXNzIHRvIHB1YmxpYyBBUEksIGkuZS4gc2Nhbm5lclJlZj8uc3RhcnQoKSBvciBzY2FubmVyUmVmPy5zdG9wKCkuXG4gKlxuICogY29uc3QgZGVjb2RlciA9IFdhc21EZWNvZGVyLmdldEluc3RhbmNlKFwiL3B1YmxpYy1wYXRoL2Fzc3NldHMvYmFyY29kZS1zY2FubmVyXCIpOyAvLyBQYXRoIHRvIGluc3RhbGxlZCBhc3NldHMuXG4gKlxuICogcmV0dXJuIDxSZWFjdEJhcmNvZGVTY2FubmVyIGRlY29kZXI9e2RlY29kZXJ9IG9uRmluZEJhcmNvZGU9e3NldEJhcmNvZGV9IHJlZj17c2Nhbm5lclJlZn0gLz47XG4gKi9cbmV4cG9ydCBjb25zdCBSZWFjdEJhcmNvZGVTY2FubmVyID0gZm9yd2FyZFJlZjxJUmVhY3RCYXJjb2RlU2Nhbm5lclJlZiwgSVJlYWN0QmFyY29kZVNjYW5uZXJQcm9wcz4oKHByb3BzLCByZWYpID0+IHtcbiAgY29uc3QgeyB2aWRlb1Byb3BzLCBvbkZpbmRCYXJjb2RlLCBkZWNvZGVyLCBpbml0T25Nb3VudCA9IHRydWUgfSA9IHByb3BzO1xuXG4gIGNvbnN0IHNjYW5uZXJSZWYgPSB1c2VSZWY8U2Nhbm5lciB8IG51bGw+KG51bGwpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGluaXRPbk1vdW50KSB7XG4gICAgICBzdGFydFNjYW5uZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGFuZGxlVW5tb3VudDtcbiAgfSwgW10pO1xuXG4gIHVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCAoKSA9PiAoe1xuICAgIHN0YXJ0OiBzdGFydFNjYW5uZXIsXG4gICAgc3RvcDogc3RvcFNjYW5uZXJcbiAgfSkpO1xuXG4gIGZ1bmN0aW9uIHN0YXJ0U2Nhbm5lcigpOiB2b2lkIHtcbiAgICBpZiAoc2Nhbm5lclJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdmlkZW8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh2aWRlb0lkKSBhcyBIVE1MVmlkZW9FbGVtZW50O1xuXG4gICAgc2Nhbm5lclJlZi5jdXJyZW50ID0gbmV3IFNjYW5uZXIodmlkZW8sIGRlY29kZXIsICgoKSA9PiB7XG4gICAgICBsZXQgcHJldmlvdXNWYWx1ZTogc3RyaW5nO1xuXG4gICAgICByZXR1cm4gKHsgcmF3VmFsdWUgfTogSUJhcmNvZGUpID0+IHtcbiAgICAgICAgLy8gQ29tcGFyZSB3aXRoIHByZXZpb3VzIHZhbHVlLCB0byBlbnN1cmUgdGhlIGNvcnJlY3Qgb25lIGhhcyBiZWVuIGZvdW5kLlxuICAgICAgICBpZiAoIXByZXZpb3VzVmFsdWUgfHwgcmF3VmFsdWUgIT09IHByZXZpb3VzVmFsdWUpIHtcbiAgICAgICAgICBwcmV2aW91c1ZhbHVlID0gcmF3VmFsdWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgb25GaW5kQmFyY29kZShyYXdWYWx1ZSk7XG4gICAgICB9O1xuICAgIH0pKCkpO1xuXG4gICAgc2Nhbm5lclJlZi5jdXJyZW50LnN0YXJ0KCk7XG4gIH1cblxuICBmdW5jdGlvbiBzdG9wU2Nhbm5lcigpOiB2b2lkIHtcbiAgICBpZiAoc2Nhbm5lclJlZi5jdXJyZW50ICE9IG51bGwpIHtcbiAgICAgIHNjYW5uZXJSZWYuY3VycmVudC5zdG9wKCk7XG4gICAgICBzY2FubmVyUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVVubW91bnQoKTogdm9pZCB7XG4gICAgc3RvcFNjYW5uZXIoKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPHZpZGVvIHsuLi52aWRlb1Byb3BzfSBpZD17dmlkZW9JZH0gLz5cbiAgKTtcbn0pO1xuIl19