{"ast":null,"code":"import { __awaiter, __generator } from 'tslib';\nimport rawr from 'rawr';\nimport transport from 'rawr/transports/worker';\n\nvar Scanner =\n/** @class */\nfunction () {\n  function Scanner(videoElement, decoder, cb) {\n    this.videoElement = videoElement;\n    this.decoder = decoder;\n    this.cb = cb;\n    this.constraints = {\n      video: {\n        facingMode: \"environment\"\n      },\n      audio: false\n    };\n    this.running = false;\n\n    this.resolve = function () {\n      return null;\n    };\n\n    this.reject = function () {\n      return null;\n    };\n\n    this.decodeCanvas = document.createElement(\"canvas\");\n    this.onLoadedData = this.onLoadedData.bind(this);\n    this.getOnFrameHandler = this.getOnFrameHandler.bind(this);\n  }\n\n  Scanner.prototype.start = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var stream;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.running = true;\n            this.videoElement = this.videoElement;\n            this.videoElement.addEventListener(\"loadeddata\", this.onLoadedData); // Ensure correct attributes\n\n            this.videoElement.setAttribute(\"autoplay\", \"\");\n            this.videoElement.setAttribute(\"muted\", \"\");\n            this.videoElement.setAttribute(\"playsinline\", \"\");\n            return [4\n            /*yield*/\n            , navigator.mediaDevices.getUserMedia(this.constraints)];\n\n          case 1:\n            stream = _a.sent();\n            this.videoElement.srcObject = stream;\n            return [2\n            /*return*/\n            , new Promise(function (res, rej) {\n              _this.resolve = res;\n              _this.reject = rej;\n            })];\n        }\n      });\n    });\n  };\n\n  Scanner.prototype.stop = function () {\n    if (!this.videoElement || !this.videoElement.srcObject) {\n      return;\n    }\n\n    this.videoElement.removeEventListener(\"loadeddata\", this.onLoadedData);\n    var ms = this.videoElement.srcObject;\n    ms.getTracks().forEach(function (t) {\n      return t.stop();\n    });\n    this.videoElement.srcObject = null;\n    this.running = false;\n  };\n\n  Scanner.prototype.onLoadedData = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (!this.decodeCanvas || !this.videoElement) {\n          this.reject();\n          return [2\n          /*return*/\n          ];\n        }\n\n        this.decodeCanvas.height = this.videoElement.videoHeight;\n        this.decodeCanvas.width = this.videoElement.videoWidth;\n        requestAnimationFrame(this.getOnFrameHandler());\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  Scanner.prototype.getOnFrameHandler = function () {\n    var _this = this;\n\n    if (!this.decodeCanvas) {\n      return function () {\n        return null;\n      };\n    }\n\n    this.resolve();\n    var decodeCtx = this.decodeCanvas.getContext(\"2d\");\n\n    var onFrame = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var barcode, err_1;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!this.decodeCanvas || !this.videoElement) {\n                return [2\n                /*return*/\n                ];\n              }\n\n              decodeCtx.drawImage(this.videoElement, 0, 0, this.videoElement.videoWidth, this.videoElement.videoHeight);\n              barcode = null;\n              _a.label = 1;\n\n            case 1:\n              _a.trys.push([1, 3,, 4]);\n\n              return [4\n              /*yield*/\n              , this.decoder.decode(decodeCtx)];\n\n            case 2:\n              barcode = _a.sent();\n\n              if (barcode) {\n                this.cb(barcode);\n              }\n\n              return [3\n              /*break*/\n              , 4];\n\n            case 3:\n              err_1 = _a.sent();\n              console.log({\n                decodeError: err_1.message\n              });\n              return [3\n              /*break*/\n              , 4];\n\n            case 4:\n              if (this.running) {\n                requestAnimationFrame(onFrame);\n              }\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    return onFrame;\n  };\n\n  return Scanner;\n}();\n\nvar workerFileName = \"wasm-worker.js\";\n\nfunction sanitizeDirString(s) {\n  return s.replace(/\\/$/, \"\");\n}\n\nvar WasmDecoder =\n/** @class */\nfunction () {\n  function WasmDecoder(installationDir) {\n    if (installationDir === void 0) {\n      installationDir = \"\";\n    }\n\n    var workerFilePath = installationDir + \"/\" + workerFileName;\n    this.worker = new Worker(workerFilePath);\n    this.wasmDecoder = rawr({\n      transport: transport(this.worker)\n    });\n  }\n\n  WasmDecoder.getInstance = function (installationDir) {\n    if (installationDir === void 0) {\n      installationDir = \"\";\n    }\n\n    if (!WasmDecoder.instance) {\n      var sanitized = sanitizeDirString(installationDir);\n      WasmDecoder.instance = new WasmDecoder(sanitized);\n    }\n\n    return WasmDecoder.instance;\n  };\n\n  WasmDecoder.removeInstance = function () {\n    WasmDecoder.instance.dispose();\n    WasmDecoder.instance = null;\n  };\n\n  WasmDecoder.prototype.decode = function (context) {\n    var canvas = context.canvas;\n    var width = canvas.width;\n    var height = canvas.height;\n    var imageData = context.getImageData(0, 0, width, height);\n    return this.wasmDecoder.methods.detectUrl(width, height, imageData);\n  };\n\n  WasmDecoder.prototype.dispose = function () {\n    this.wasmDecoder = null;\n    this.worker.terminate();\n  };\n\n  return WasmDecoder;\n}();\n\nexport { Scanner, WasmDecoder };","map":{"version":3,"sources":["ng://@impactdk/barcode-scanner/src/scanner/scanner.ts","ng://@impactdk/barcode-scanner/src/decoder/decoder.ts"],"names":[],"mappings":"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","sourcesContent":["import { IDecoder } from \"../decoder/decoder\";\nimport { IBarcode } from '../decoder/barcode';\n\nexport class Scanner {\n\n  private decodeCanvas: HTMLCanvasElement;\n  private constraints: MediaStreamConstraints = {\n    video: {\n      facingMode: \"environment\"\n    },\n    audio: false\n  };\n  private running = false;\n\n  constructor(private videoElement: HTMLVideoElement, private decoder: IDecoder, private cb: (barcode: IBarcode) => void) {\n    this.decodeCanvas = document.createElement(\"canvas\");\n\n    this.onLoadedData = this.onLoadedData.bind(this);\n    this.getOnFrameHandler = this.getOnFrameHandler.bind(this);\n  }\n\n  public async start(): Promise<void> {\n    this.running = true;\n    this.videoElement = this.videoElement;\n\n    this.videoElement.addEventListener(\"loadeddata\", this.onLoadedData);\n\n    // Ensure correct attributes\n    this.videoElement.setAttribute(\"autoplay\", \"\");\n    this.videoElement.setAttribute(\"muted\", \"\");\n    this.videoElement.setAttribute(\"playsinline\", \"\");\n\n    const stream = await navigator.mediaDevices.getUserMedia(this.constraints);\n\n    this.videoElement.srcObject = stream;\n\n    return new Promise<void>((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n\n  }\n\n  public stop() {\n    if (!this.videoElement || !this.videoElement.srcObject) { return; }\n\n    this.videoElement.removeEventListener(\"loadeddata\", this.onLoadedData);\n\n    const ms = this.videoElement.srcObject as MediaStream;\n    ms.getTracks().forEach(t => t.stop());\n\n    this.videoElement.srcObject = null;\n    this.running = false;\n  }\n\n  private resolve: () => void = () => null;\n  private reject: (reason?: any) => void = () => null;\n\n  private async onLoadedData() {\n    if (!this.decodeCanvas || !this.videoElement) { this.reject(); return; }\n\n    this.decodeCanvas.height = this.videoElement.videoHeight;\n    this.decodeCanvas.width = this.videoElement.videoWidth;\n\n    requestAnimationFrame(this.getOnFrameHandler());\n  }\n\n  private getOnFrameHandler(): () => void {\n    if (!this.decodeCanvas) { return () => null; }\n\n    this.resolve();\n\n    const decodeCtx = this.decodeCanvas.getContext(\"2d\");\n\n    const onFrame = async () => {\n      if (!this.decodeCanvas || !this.videoElement) { return; }\n\n      decodeCtx.drawImage(this.videoElement, 0, 0, this.videoElement.videoWidth, this.videoElement.videoHeight);\n      let barcode: IBarcode = null;\n\n      try {\n        barcode = await this.decoder.decode(decodeCtx);\n\n        if (barcode) {\n          this.cb(barcode);\n        }\n      } catch (err) {\n        console.log({ decodeError: err.message });\n      }\n\n      if (this.running) {\n        requestAnimationFrame(onFrame);\n      }\n    };\n\n    return onFrame;\n  }\n}\n","import rawr from \"rawr\";\nimport transport from \"rawr/transports/worker\";\n\nimport { IBarcode } from './barcode';\n\nconst workerFileName = \"wasm-worker.js\";\n\nexport interface IDecoder {\n  decode(context: CanvasRenderingContext2D): IBarcode;\n}\n\nfunction sanitizeDirString(s: string): string {\n  return s.replace(/\\/$/, \"\");\n}\n\nexport class WasmDecoder implements IDecoder {\n  private static instance: WasmDecoder;\n  private wasmDecoder: any;\n  private worker: Worker;\n\n  private constructor(installationDir: string = \"\") {\n    const workerFilePath = `${installationDir}/${workerFileName}`;\n    this.worker = new Worker(workerFilePath);\n\n    this.wasmDecoder = rawr({ transport: transport(this.worker) });\n  }\n\n  public static getInstance(installationDir: string = \"\"): WasmDecoder {\n    if (!WasmDecoder.instance) {\n      const sanitized = sanitizeDirString(installationDir);\n      WasmDecoder.instance = new WasmDecoder(sanitized);\n    }\n\n    return WasmDecoder.instance;\n  }\n\n  public static removeInstance(): void {\n    WasmDecoder.instance.dispose();\n    WasmDecoder.instance = null;\n  }\n\n  public decode(context: CanvasRenderingContext2D): IBarcode {\n    const canvas = context.canvas;\n    const width = canvas.width;\n    const height = canvas.height;\n    const imageData = context.getImageData(0, 0, width, height);\n\n    return this.wasmDecoder.methods.detectUrl(width, height, imageData);\n  }\n\n  private dispose(): void {\n    this.wasmDecoder = null;\n    this.worker.terminate();\n  }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}