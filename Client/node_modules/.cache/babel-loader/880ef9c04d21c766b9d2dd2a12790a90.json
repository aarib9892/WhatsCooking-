{"ast":null,"code":"const {\n  EventEmitter\n} = require('events');\n\nfunction transport(socket, allowBinary = false) {\n  const emitter = new EventEmitter();\n  socket.addEventListener('message', async evt => {\n    let {\n      data\n    } = evt;\n\n    if (allowBinary && data instanceof Blob) {\n      data = await new Response(data).text().catch(() => null);\n    }\n\n    if (typeof evt.data === 'string') {\n      try {\n        const msg = JSON.parse(evt.data);\n\n        if (msg.method || msg.id && ('result' in msg || 'error' in msg)) {\n          emitter.emit('rpc', msg);\n        }\n      } catch (err) {// wasn't a JSON message\n      }\n    }\n  });\n\n  emitter.send = msg => {\n    socket.send(JSON.stringify(msg));\n  };\n\n  return emitter;\n}\n\nmodule.exports = transport;","map":{"version":3,"sources":["C:/Users/aarib/Desktop/REACT_BootCamp/whatsCooking/node_modules/rawr/transports/websocket/index.js"],"names":["EventEmitter","require","transport","socket","allowBinary","emitter","addEventListener","evt","data","Blob","Response","text","catch","msg","JSON","parse","method","id","emit","err","send","stringify","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAmBC,OAAO,CAAC,QAAD,CAAhC;;AAEA,SAASC,SAAT,CAAmBC,MAAnB,EAA2BC,WAAW,GAAG,KAAzC,EAAgD;AAC9C,QAAMC,OAAO,GAAG,IAAIL,YAAJ,EAAhB;AACAG,EAAAA,MAAM,CAACG,gBAAP,CAAwB,SAAxB,EAAmC,MAAOC,GAAP,IAAe;AAChD,QAAI;AAAEC,MAAAA;AAAF,QAAWD,GAAf;;AACA,QAAIH,WAAW,IAAII,IAAI,YAAYC,IAAnC,EAAyC;AACvCD,MAAAA,IAAI,GAAG,MAAO,IAAIE,QAAJ,CAAaF,IAAb,CAAD,CAAqBG,IAArB,GAA4BC,KAA5B,CAAkC,MAAM,IAAxC,CAAb;AACD;;AACD,QAAI,OAAOL,GAAG,CAACC,IAAX,KAAoB,QAAxB,EAAkC;AAChC,UAAI;AACF,cAAMK,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWR,GAAG,CAACC,IAAf,CAAZ;;AACA,YAAIK,GAAG,CAACG,MAAJ,IAAeH,GAAG,CAACI,EAAJ,KAAW,YAAYJ,GAAZ,IAAmB,WAAWA,GAAzC,CAAnB,EAAmE;AACjER,UAAAA,OAAO,CAACa,IAAR,CAAa,KAAb,EAAoBL,GAApB;AACD;AACF,OALD,CAKE,OAAOM,GAAP,EAAY,CACZ;AACD;AACF;AACF,GAfD;;AAgBAd,EAAAA,OAAO,CAACe,IAAR,GAAgBP,GAAD,IAAS;AACtBV,IAAAA,MAAM,CAACiB,IAAP,CAAYN,IAAI,CAACO,SAAL,CAAeR,GAAf,CAAZ;AACD,GAFD;;AAGA,SAAOR,OAAP;AACD;;AAEDiB,MAAM,CAACC,OAAP,GAAiBrB,SAAjB","sourcesContent":["const { EventEmitter } = require('events');\n\nfunction transport(socket, allowBinary = false) {\n  const emitter = new EventEmitter();\n  socket.addEventListener('message', async (evt) => {\n    let { data } = evt;\n    if (allowBinary && data instanceof Blob) {\n      data = await (new Response(data)).text().catch(() => null);\n    }\n    if (typeof evt.data === 'string') {\n      try {\n        const msg = JSON.parse(evt.data);\n        if (msg.method || (msg.id && ('result' in msg || 'error' in msg))) {\n          emitter.emit('rpc', msg);\n        }\n      } catch (err) {\n        // wasn't a JSON message\n      }\n    }\n  });\n  emitter.send = (msg) => {\n    socket.send(JSON.stringify(msg));\n  };\n  return emitter;\n}\n\nmodule.exports = transport;\n"]},"metadata":{},"sourceType":"script"}