{"ast":null,"code":"import { __assign } from 'tslib';\nimport React, { forwardRef, useRef, useEffect, useImperativeHandle } from 'react';\nimport { Scanner } from '@impactdk/barcode-scanner';\nvar videoId = \"scanner-video\";\n/**\n * @example\n * import { WasmDecoder } from \"@impactdk/barcode-scanner\";\n * import { ReactBarcodeScanner, IReactBarcodeScannerRef } from \"@impactdk/react-barcode-scanner\";\n *\n * const scannerRef = useRef<IReactBarcodeScannerRef>(); // Access to public API, i.e. scannerRef?.start() or scannerRef?.stop().\n *\n * const decoder = WasmDecoder.getInstance(\"/public-path/asssets/barcode-scanner\"); // Path to installed assets.\n *\n * return <ReactBarcodeScanner decoder={decoder} onFindBarcode={setBarcode} ref={scannerRef} />;\n */\n\nvar ReactBarcodeScanner = forwardRef(function (props, ref) {\n  var videoProps = props.videoProps,\n      onFindBarcode = props.onFindBarcode,\n      decoder = props.decoder,\n      _a = props.initOnMount,\n      initOnMount = _a === void 0 ? true : _a;\n  var scannerRef = useRef(null);\n  useEffect(function () {\n    if (initOnMount) {\n      startScanner();\n    }\n\n    return handleUnmount;\n  }, []);\n  useImperativeHandle(ref, function () {\n    return {\n      start: startScanner,\n      stop: stopScanner\n    };\n  });\n\n  function startScanner() {\n    if (scannerRef.current) {\n      return;\n    }\n\n    var video = document.getElementById(videoId);\n    scannerRef.current = new Scanner(video, decoder, function () {\n      var previousValue;\n      return function (_a) {\n        var rawValue = _a.rawValue; // Compare with previous value, to ensure the correct one has been found.\n\n        if (!previousValue || rawValue !== previousValue) {\n          previousValue = rawValue;\n          return;\n        }\n\n        onFindBarcode(rawValue);\n      };\n    }());\n    scannerRef.current.start();\n  }\n\n  function stopScanner() {\n    if (scannerRef.current != null) {\n      scannerRef.current.stop();\n      scannerRef.current = null;\n    }\n  }\n\n  function handleUnmount() {\n    stopScanner();\n  }\n\n  return React.createElement(\"video\", __assign({}, videoProps, {\n    id: videoId\n  }));\n});\nexport { ReactBarcodeScanner };","map":{"version":3,"sources":["ng://@impactdk/react-barcode-scanner/react-barcode-scanner/react-barcode-scanner.component.tsx"],"names":[],"mappings":";;;AAwCA,IAAM,OAAO,GAAG,eAAhB;;;;;;;;;;;;;AAaA,IAAa,mBAAmB,GAAG,UAAU,CAAqD,UAAC,KAAD,EAAQ,GAAR,EAAW;AACnG,MAAA,UAAA,GAAA,KAAA,CAAA,UAAA;AAAA,MAAY,aAAA,GAAA,KAAA,CAAA,aAAZ;AAAA,MAA2B,OAAA,GAAA,KAAA,CAAA,OAA3B;AAAA,MAAoC,EAAA,GAAA,KAAA,CAAA,WAApC;AAAA,MAAoC,WAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,EAApC;AAER,MAAM,UAAU,GAAG,MAAM,CAAiB,IAAjB,CAAzB;AAEA,EAAA,SAAS,CAAC,YAAA;AACR,QAAI,WAAJ,EAAiB;AACf,MAAA,YAAY;AACb;;AAED,WAAO,aAAP;AACD,GANQ,EAMN,EANM,CAAT;AAQA,EAAA,mBAAmB,CAAC,GAAD,EAAM,YAAA;AAAM,WAAC;AAC9B,MAAA,KAAK,EAAE,YADuB;AAE9B,MAAA,IAAI,EAAE;AAFwB,KAAD;AAG7B,GAHiB,CAAnB;;AAKA,WAAS,YAAT,GAAqB;AACnB,QAAI,UAAU,CAAC,OAAf,EAAwB;AACtB;AACD;;AAED,QAAM,KAAK,GAAG,QAAQ,CAAC,cAAT,CAAwB,OAAxB,CAAd;AAEA,IAAA,UAAU,CAAC,OAAX,GAAqB,IAAI,OAAJ,CAAY,KAAZ,EAAmB,OAAnB,EAA6B,YAAA;AAChD,UAAI,aAAJ;AAEA,aAAO,UAAC,EAAD,EAAuB;YAApB,QAAA,GAAA,EAAA,CAAA,Q,CAAoB,C;;AAE5B,YAAI,CAAC,aAAD,IAAkB,QAAQ,KAAK,aAAnC,EAAkD;AAChD,UAAA,aAAa,GAAG,QAAhB;AACA;AACD;;AAED,QAAA,aAAa,CAAC,QAAD,CAAb;AACD,OARD;AASD,KAZgD,EAA5B,CAArB;AAcA,IAAA,UAAU,CAAC,OAAX,CAAmB,KAAnB;AACD;;AAED,WAAS,WAAT,GAAoB;AAClB,QAAI,UAAU,CAAC,OAAX,IAAsB,IAA1B,EAAgC;AAC9B,MAAA,UAAU,CAAC,OAAX,CAAmB,IAAnB;AACA,MAAA,UAAU,CAAC,OAAX,GAAqB,IAArB;AACD;AACF;;AAED,WAAS,aAAT,GAAsB;AACpB,IAAA,WAAW;AACZ;;AAED,SACE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA,EAAA,EAAW,UAAX,EAAqB;AAAE,IAAA,EAAE,EAAE;AAAN,GAArB,CAAA,CADF;AAGD,CAxD4C,CAA7C","sourcesContent":["import React, { useEffect, useRef, forwardRef, useImperativeHandle } from \"react\";\nimport { IBarcode, Scanner, IDecoder } from \"@impactdk/barcode-scanner\";\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\nexport interface IReactBarcodeScannerRef {\n  start(): void;\n  stop(): void;\n}\n\nexport interface IReactBarcodeScannerProps {\n  /**\n   * @description\n   * Props passed to underlying video element. ID is reserved for DOM access.\n   */\n  videoProps?: Omit<React.VideoHTMLAttributes<HTMLVideoElement>, \"id\" | \"src\">;\n  /**\n   * @description\n   * Callback for when barcode is identified.\n   */\n  onFindBarcode: (barcode: string) => void;\n  /**\n   * @description\n   * Supply decoder responsible for decoding the canvas context made by the scanner.\n   *\n   * @example\n   * import { WasmDecoder } from \"@impactdk/barcode-scanner\";\n   *\n   * const decoder = WasmDecoder.getInstance(\"/public-path/assets\"); // Path to assets installed through included cli.\n   */\n  decoder: IDecoder;\n  /**\n   * @description\n   * If false, the consumer is responsible for starting the scanner through ref public API.\n   *\n   * @default true\n   */\n  initOnMount?: boolean;\n}\n\nconst videoId = \"scanner-video\";\n\n/**\n * @example\n * import { WasmDecoder } from \"@impactdk/barcode-scanner\";\n * import { ReactBarcodeScanner, IReactBarcodeScannerRef } from \"@impactdk/react-barcode-scanner\";\n *\n * const scannerRef = useRef<IReactBarcodeScannerRef>(); // Access to public API, i.e. scannerRef?.start() or scannerRef?.stop().\n *\n * const decoder = WasmDecoder.getInstance(\"/public-path/asssets/barcode-scanner\"); // Path to installed assets.\n *\n * return <ReactBarcodeScanner decoder={decoder} onFindBarcode={setBarcode} ref={scannerRef} />;\n */\nexport const ReactBarcodeScanner = forwardRef<IReactBarcodeScannerRef, IReactBarcodeScannerProps>((props, ref) => {\n  const { videoProps, onFindBarcode, decoder, initOnMount = true } = props;\n\n  const scannerRef = useRef<Scanner | null>(null);\n\n  useEffect(() => {\n    if (initOnMount) {\n      startScanner();\n    }\n\n    return handleUnmount;\n  }, []);\n\n  useImperativeHandle(ref, () => ({\n    start: startScanner,\n    stop: stopScanner\n  }));\n\n  function startScanner(): void {\n    if (scannerRef.current) {\n      return;\n    }\n\n    const video = document.getElementById(videoId) as HTMLVideoElement;\n\n    scannerRef.current = new Scanner(video, decoder, (() => {\n      let previousValue: string;\n\n      return ({ rawValue }: IBarcode) => {\n        // Compare with previous value, to ensure the correct one has been found.\n        if (!previousValue || rawValue !== previousValue) {\n          previousValue = rawValue;\n          return;\n        }\n\n        onFindBarcode(rawValue);\n      };\n    })());\n\n    scannerRef.current.start();\n  }\n\n  function stopScanner(): void {\n    if (scannerRef.current != null) {\n      scannerRef.current.stop();\n      scannerRef.current = null;\n    }\n  }\n\n  function handleUnmount(): void {\n    stopScanner();\n  }\n\n  return (\n    <video {...videoProps} id={videoId} />\n  );\n});\n"]},"metadata":{},"sourceType":"module"}